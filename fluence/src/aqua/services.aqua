aqua Services declares *

import "./types"

service TuDsgPublicationFromJson("json"):
  parse(s: string) -> TuDsgPublication

service TuDsgAuthorFromJson("json"):
  parse(s: string) -> TuDsgAuthorData

-- service TuDsgAuthor("tuDsgAuthor"):
--   fetch() -> TuDsgAuthorData

service TuDsgPublish("tuDsgPublish"):
  fetch(cid: string, networked_ipfs: string) -> TuDsgPublication
  import_templates(publication: TuDsgPublication, kubo_multiaddr: string) -> AquaMarineResult

service TuDsgContent("tuDsgContent"):
  bulk(publication: TuDsgPublication, post_type: string, subnet_kubo: string) -> []TuDsgRenderObject
  map(task: TuDsgPublishTask, mappings: string) -> []u8
  pebble(task: TuDsgPublishTask, content: []u8) ->  []TuDsgRenderObject
  ripple(task: TuDsgPublishTask, ripple: TuDsgRipple, amResult: AquaMarineResult) ->  []TuDsgRenderObject
  test() -> TuDsgContentData

service TuDsgDb("tuDsgDb"):
  store(content: TuDsgContentData) -> AquaMarineResult

service TuDsgRenderer("tuDsgRenderer"):
  collect(publication_name: string, kubo_multiaddr: string) -> AquaMarineResult
  imports(archive_cid: string, publication: TuDsgPublication, kubo_multiaddr: string) -> AquaMarineResult
  single(ro: TuDsgRenderObject, kubo_multiaddr: string) -> AquaMarineResult
  test() -> AquaMarineResult

service TuDsgRenderImport("tuDsgRenderImport"):
  imports(archive_cid: string, publication: TuDsgPublication, kubo_multiaddr: string) -> AquaMarineResult

service TuDsgRenderData("tuDsgRenderData"):
  single(ro: TuDsgRenderObject, kubo_multiaddr: string) -> AquaMarineResult

service TuDsgRendererStripped("tuDsgRendererStripped"):
  single(ro: TuDsgRenderObject, td: []u8, kubo_multiaddr: string) -> AquaMarineResult

service TuDsgRenderCollect("tuDsgRenderCollect"):
  collect(publication_name: string, kubo_multiaddr: string) -> AquaMarineResult

service TuDsgHost("tuDsgHost"):
  update(html_cid: string, publication: TuDsgPublication, kubo: string) -> AquaMarineResult
  restart() -> bool
  certify(publication: TuDsgPublication) -> AquaMarineResult
  a_record(publication: TuDsgPublication, ip: string) -> AquaMarineResult

service MyService("myService"):
  greeting(name: string) -> string

service TuCar("tuCar"):
  extract(cid: string, path: string) 
  archive(path: string) -> string

service TuContentTable("tuContentTable"): 
  insert(content: []u8) -> AquaMarineResult
  queryRipple(ripple: TuDsgRipple) -> AquaMarineResult

