
import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-lib/subnet.aqua"
import "@fluencelabs/aqua-ipfs/ipfs.aqua"

-- use "deals.aqua"
use "../../.fluence/aqua/hosts.aqua"
import SpellLocation from "../../.fluence/aqua/hosts.aqua"
import "./types.aqua"
import "./services.aqua"

func getWorkerInfo() -> []SpellLocation:

    hosts <- Hosts.get()  
    <- hosts.dsgWorkerV1!.installationSpells


-- func fetchCar(cid: string, pub_name: string) -> AquaMarineResult:

--     car_results: *AquaMarineResult
--     -- ipfs_results: *IpfsGetResult
--     kubo = Ipfs.get_local_api_multiaddr()
--     -- ipfs_results <- Ipfs.get(cid)
--     car_results <- TuCar.extract(cid, pub_name, kubo.multiaddr)

--     <- car_results!

func randomWorker() -> SpellLocation:

    -- figure out how to do this; 
    --- returning first for now

    workers <- getWorkerInfo()

    <- workers! 



func fetchPublication(cid: string) -> TuDsgPublication:

    s: *string 
    ipfs_results: *IpfsGetResult

    for w <- getWorkerInfo():
        on w.workerId via w.hostId:
            ipfs_results <- Ipfs.dag_get(cid)
            s <- Vault.cat(ipfs_results!.path)
    
    <- TuDsgPublicationFromJson.parse(s!)

func fetchAuthor(cid: string) -> TuDsgAuthorData:

    s: *string  
    ipfs_results: *IpfsGetResult

    workers <- getWorkerInfo()
    for w <- workers:
        on w.workerId via w.hostId:
            ipfs_results <- Ipfs.dag_get(cid)
            s <- Vault.cat(ipfs_results!.path)
    
    <- TuDsgAuthorFromJson.parse(s!)


func fromTempTask(tempTask: TuDsgPublishTaskTemp) -> TuDsgPublishTask:

    authorData = fetchAuthor(tempTask.author)
    publicationData = fetchPublication(tempTask.publication)
    
    <- TuDsgPublishTask(
        slug = tempTask.slug, 
        author = authorData, 
        payload = tempTask.payload, 
        post_type = tempTask.post_type, 
        publication = publicationData
    )

-- func fetchContent(cid: string) -> TuDsgContentData:

--     s: *string 
--     ipfs_results: *IpfsGetResult
--     ipfs_results <- Ipfs.dag_get(cid)
--     s <- Vault.cat(ipfs_results!.path)
    
--     <- Json.parse(s!)