aqua Helpers declares * 

import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/builtin"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/subnet"

use "../../.fluence/aqua/deals.aqua"
import "./services.aqua"
import "./types.aqua"

func getTaskWorkers() -> []Worker:

    deals <- Deals.get()
    dealId = deals.taskWorkerV1!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
    <- subnet.workers

func getOtherTaskWorkers(me: string) -> []Worker:

    other: *Worker
    ws = getTaskWorkers()
    for w <- ws:
        if w.host_id != me: 
            other <<- w
    <- other

func randomTaskWorker() -> Worker:
    <- getTaskWorkers()!

func getContentWorkers() -> []Worker:

    deals <- Deals.get()
    dealId = deals.contentWorkerV1!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
        if subnet.success == false:
            Console.print(["Failed to resolve subnet: ", subnet.error])
    <- subnet.workers

func randomContentWorker() -> Worker:
    <- getContentWorkers()!

func getRenderWorkers() -> []Worker:

    deals <- Deals.get()
    dealId = deals.renderWorkerV1!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
    if subnet.success == false:
        Console.print(["Failed to resolve subnet: ", subnet.error])
    
    <- subnet.workers

func randomRenderWorker() -> Worker:
    <- getRenderWorkers()!

func getWebHostWorkers() -> []Worker:

    deals <- Deals.get()
    dealId = deals.webHostWorkerV1!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
    if subnet.success == false:
        Console.print(["Failed to resolve subnet: ", subnet.error])
    
    <- subnet.workers

-- func getSignerWorkers() -> []Worker:

--     deals <- Deals.get()
--     dealId = deals.signerWorkerV1!.dealIdOriginal
--     on HOST_PEER_ID:
--         subnet <- Subnet.resolve(dealId)
--     if subnet.success == false:
--         Console.print(["Failed to resolve subnet: ", subnet.error])
    
--     <- subnet.workers

func stringtoAMResult(s: string) -> AquaMarineResult:

    output: *[]u8
    results: *string
    results <<- s
    errors: *string

    <- AquaMarineResult(
        output = output,
        results = results,
        errors = errors
    )
    
func selectLeader(responses: *AMResponse) -> Worker: 

    winner: *AMResponse 
    cids: *string
    workers: *Worker

    for r <- responses:
        for c <- cids:
            if c == r.result:
                winner <<- r
        cids <<- r.result

    ws = getRenderWorkers()
    for w <- ws: 
        if w.host_id == winner!.host_id:
            workers <<- w

    <- workers!


