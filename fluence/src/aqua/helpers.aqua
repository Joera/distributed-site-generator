aqua Helpers declares * 

import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/builtin"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/subnet"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-ipfs/ipfs"

use "persisted_hosts"
use "../../.fluence/aqua/hosts"
import SpellLocation from "./persisted_hosts"
import "./types"
import "./services"

func randomWorker(workerIndex: u8) -> SpellLocation:

    hosts <- PersistedHosts.get()  
    workers  = hosts[workerIndex].installationSpells
    <- workers! 

func randomDevWorker() -> SpellLocation:

    hosts <- Hosts.get() 
    workers = hosts.devWorkerV0!.installationSpells
    <- workers! 

func getDevWorkers() -> []SpellLocation:

    hosts <- Hosts.get()  
    <- hosts.devWorkerV0!.installationSpells

func getWorkers() -> []SpellLocation:

    hosts <- PersistedHosts.get()  
    <- hosts[0].installationSpells

func fetchPublication(cid: string) -> TuDsgPublication:

    s: *string 
    ipfs_results: *IpfsGetResult

    for w <- getDevWorkers():
        on w.workerId via w.hostId:
            ipfs_results <- Ipfs.dag_get(cid)
            s <- Vault.cat(ipfs_results!.path)
        
    <- TuDsgPublicationFromJson.parse(s!)

func fetchAuthor(cid: string) -> TuDsgAuthorData:

    s: *string  
    ipfs_results: *IpfsGetResult

    for w <- getDevWorkers():
        on w.workerId via w.hostId:
            ipfs_results <- Ipfs.dag_get(cid)
            s <- Vault.cat(ipfs_results!.path)
    
    <- TuDsgAuthorFromJson.parse(s!)


func fromTempTask(tempTask: TuDsgPublishTaskTemp) -> TuDsgPublishTask:

    authorData = fetchAuthor(tempTask.author)
    publicationData = fetchPublication(tempTask.publication)
    
    <- TuDsgPublishTask(
        slug = tempTask.slug, 
        author = authorData, 
        payload = tempTask.payload, 
        post_type = tempTask.post_type, 
        publication = publicationData
    )



-- func fetchContent(cid: string) -> TuDsgContentData:

--     s: *string 
--     ipfs_results: *IpfsGetResult
--     ipfs_results <- Ipfs.dag_get(cid)
--     s <- Vault.cat(ipfs_results!.path)
    
--     <- Json.parse(s!)